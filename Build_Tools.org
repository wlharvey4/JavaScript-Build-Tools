# -*- mode:org -*-

#+title:JavaScript Build Tools
#+date:2019-08-21 00:09
#+macro: version Version 0.0.1

* Babel
** Description
{{{heading(Babel is a JavaScript compiler)}}}

#+cindex:Babel
#+cindex:ECMAScript 2015
Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into
a backwards compatible version of JavaScript in current and older browsers or
environments.

Here are the main things Babel can do for you:

- Transform syntax

- Polyfill features that are missing in your target environment (through
  =@babel/polyfill=)

* WebPack
- [[https://webpack.js.org][WebPack Home]]


#+cindex:bundler
#+cindex:module bundler
#+cindex:dependency graph
{{{command(webpack)}}} is a static module bundler for modern JavaScript
applications.  When {{{command(webpack)}}} processes your application, it
internally builds a *dependency graph* which maps every module your project
needs and generates one or more bundles.  Since version 4.0.0,
{{{command(webpack)}}} does not require a configuration file to bundle your
project.

** WebPack Core Concepts
#+cindex:core concepts
To get started you only need to understand its Core Concepts:

*** Entry
#+cindex:entry point
#+cindex:default entry point
#+cindex:@code{entry} property
#+cindex:configuration
- Entry point ::

                 An entry point indicates which module {{{command(webpack)}}}
                 should use to begin building out its internal dependency
                 graph.  {{{command(webpack)}}} will figure out which other
                 modules and libraries that entry point depends on (directly
                 and indirectly).

                 The default entry point value is ~./src/index.js~.

                 You can specify a different (or multiple entry points) by
                 configuring the =entry= property in the webpack configuration.

                 #+caption:Entry Point in webpack.config.js
                 #+name:entry-webpack-config
                 #+begin_src js
                 module.exports = {
                     entry: './path/to/my/entry/file.js'
                 }
                 #+end_src

*** Output

#+cindex:@code{output} property
#+cindex:emit
#+cindex:default output path
#+cindex:main output file
- Output property ::

     The =output= property tells {{{command(webpack)}}} where to emit the
     bundles it creates and how to name these files.

     The default output path for the main output file is ~./dist/main.js~, and
     the ~./dist~ folder for any other generate files.

     You can configure this part of the process by specifying an =output= field
     in your configuration:

     #+caption:Main Output File
     #+name:main-output-webpack-config
     #+begin_src js
     const path = require('path');

     module.exports = {
       entry: './path/to/my/entry/file.js',
       output: {
         path: path.resolve(__dirname, 'dist'),
         filename: 'my-first-webpack.bundle.js'
       }
     };
     #+end_src

     We use the ~output.filename~ and the ~output.path~ properties to tell
     {{{command(webpack)}}} the name of our bundle and where we want it to be
     emitted to.

     The ~path~ module being imported at the top is a core Node.js module that
     gets used to manipulate file paths.

*** Loaders

*** Plugins

*** Mode

*** Browser Compatibility

** Module Bundler Resources
For a better understanding of the ideas behind module bundlers and how they
work under the hood, consult these resources:

- [[https://www.youtube.com/watch?v=UNMkLHzofQI][Manually Bundling an Application]]

- [[https://www.youtube.com/watch?v=Gc9-7PBqOC8][Live Coding a Simple Module Bundler]]

- [[https://github.com/ronami/minipack][Detailed Explanation of a Simple Module Bundler]]

* Concept Index
:PROPERTIES:
:unnumbered: t
:index:    cp
:END:
* Macro Definitions                                                :noexport:
#+macro: heading @@texinfo:@heading@@ $1
#+macro: subheading @@texinfo:@subheading@@ $1
#+macro: command @@texinfo:@code{@@$1@@texinfo:}@@

* Local Variables                                                  :noexport:
# Local Variables:
# fill-column:79
# time-stamp-pattern:"8/^\\#\\+date:%:y-%02m-%02d %02H:%02M$"
# End:
